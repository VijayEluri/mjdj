package com.confusionists.mjdj.morphs.dr2050rig;

import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.ShortMessage;

import com.confusionists.mjdj.api.MessageWrapper;
import com.confusionists.mjdj.api.MjdjService;

public class ExpressionPedalFunction {

	public boolean on;
	public boolean inverted;
	public int channel;
	public int ccOnOff;
	public int ccInvert;
	public int outgoingChannel;
	public int[] outgoingCCs;
	public String name;

	public ExpressionPedalFunction(int channel, int ccOnOff, int ccInvert, int outgoingChannel, int outgoingCC, String name) {
		this(channel, ccOnOff, ccInvert, outgoingChannel, makeArray(outgoingCC), name);
	}

	public ExpressionPedalFunction(int functionChangeChannel, int ccOnOff, int ccInvert, int outgoingChannel, int[] outgoingCCs, String name) {
		this.channel = functionChangeChannel;
		this.outgoingChannel = outgoingChannel;
		this.outgoingCCs = outgoingCCs;
		this.ccOnOff = ccOnOff;
		this.ccInvert = ccInvert;
		this.name = name;
	}

	private static int[] makeArray(int value) {
		int[] retVal = { value };
		return retVal;
	}

	public boolean processFunctionChange(MessageWrapper message) {
		ShortMessage sMessage = message.getShortMessage();
		if (message.filterControlCommand(channel, ccOnOff)) {
			on = (sMessage.getData2() > 64);
		} else if (message.filterControlCommand(channel, ccInvert)) {
			inverted = (sMessage.getData2() > 64);
		} else {
			return false;
		}
		return true;
	}

	public void processExpressionPedal(int value, MjdjService service) throws InvalidMidiDataException {
		if (!on)
			return;
		if (inverted)
			value = 127 - value;

		for (int ccOut : outgoingCCs) {
			ShortMessage message = new ShortMessage();
			message.setMessage(ShortMessage.CONTROL_CHANGE, outgoingChannel, ccOut, value);
			MessageWrapper sendMe = MessageWrapper.newInstance(message);
			service.send(sendMe);
		}

	}

}
