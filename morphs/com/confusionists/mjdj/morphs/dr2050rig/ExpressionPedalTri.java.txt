package com.confusionists.mjdj.morphs.dr2050rig;

import java.util.List;

import javax.sound.midi.ShortMessage;

import com.confusionists.mjdj.api.DeviceNotFoundException;
import com.confusionists.mjdj.api.MessageWrapper;
import com.confusionists.mjdj.api.Morph;

/* marked abstract for cleanup, this class is ready to go! */
public abstract class ExpressionPedalTri extends Morph {

	private static final int expressionPedalChannel = 0;
	private static final int expressionPedalCC = 0x7D;
	ExpressionPedalFunction wah;
	ExpressionPedalFunction crossFade;
	ExpressionPedalFunction pitch;

	@Override
	public String getName() {
		return "Expression Pedal Pedal Tri 0.0.1a";
	}

	@Override
	public void init(List<String> deviceNames) throws DeviceNotFoundException {
		service.log("You better have your expression pedal plugged in!");
		int channel = 4;
		crossFade = new ExpressionPedalFunction(channel, 0x5C, 0x50, 0, 0x7f, "x-fade");
		int[] wahCCs = { 0x11, 0x15 };
		wah = new ExpressionPedalFunction(channel, 0x5D, 0x51, 4, wahCCs, "wah");
		int[] pitchCCs = { 0x36, 0x3a };
		pitch = new ExpressionPedalFunction(channel, 0x5E, 0x52, 1, pitchCCs, "pitch");

	}

	@Override
	public boolean process(MessageWrapper message, String from) throws Exception {
		ShortMessage shortMessage = message.getShortMessage();
		if (shortMessage == null)
			return false;
		if (wah.processFunctionChange(message) | crossFade.processFunctionChange(message) | pitch.processFunctionChange(message)) {
			return true;
		}
		if (message.filterControlCommand(expressionPedalChannel, expressionPedalCC)) {
			crossFade.processExpressionPedal(shortMessage.getData2(), service);
			wah.processExpressionPedal(shortMessage.getData2(), service);
			pitch.processExpressionPedal(shortMessage.getData2(), service);
			return true;
		}
		return false;
	}

	public int getMatchGroup() {
		return MATCHES_COMMAND + MATCHES_CHANNEL + MATCHES_CC_NUMBER + MATCHES_DEVICE;
	}
	@Override
	public String diagnose() {
		// TODO Auto-generated method stub
		return null;
	}

}
