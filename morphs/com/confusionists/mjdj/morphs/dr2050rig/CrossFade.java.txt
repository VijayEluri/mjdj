package com.confusionists.mjdj.morphs.dr2050rig;

import java.util.List;

import javax.sound.midi.ShortMessage;

import com.confusionists.mjdj.api.DeviceNotFoundException;
import com.confusionists.mjdj.api.MessageWrapper;
import com.confusionists.mjdj.api.MorphWithFilter;

public abstract class CrossFade extends MorphWithFilter {
	public abstract int getChannelOutLeft();
	public abstract int getCCOutLeft();
	public abstract int getCCOutRight();
	public abstract int getChannelOutRight();

	@Override
	public String diagnose() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int getMatchGroup() {
		return 4;
	}

	@Override
	public void init(List<String> deviceNames) throws DeviceNotFoundException {

	}

	@Override
	public boolean process(MessageWrapper message, String from) throws Exception {
		if (!filter(message))
			return false;
		int value = message.getData2();
		int valueLeft;
		int valueRight;
		if (value <= 64) {
			valueLeft = 127;
			valueRight = (int)((float)value/64 * 127);
		} else {
			valueRight = 127;
			valueLeft = (int)(127-(float)(value-64)/64 * (float)127);
		}
		ShortMessage newMessage = new ShortMessage();
		newMessage.setMessage(message.getCommand(), getChannelOutLeft(), getCCOutLeft(), valueLeft);
		service.send(MessageWrapper.newInstance(newMessage));
		newMessage = new ShortMessage();
		newMessage.setMessage(message.getCommand(), getChannelOutRight(), getCCOutRight(), valueRight);
		service.send(MessageWrapper.newInstance(newMessage));
		
		return true;
		
	}

}
